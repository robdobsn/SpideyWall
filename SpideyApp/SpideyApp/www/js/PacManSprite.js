// Generated by CoffeeScript 1.7.1
var PacManSprite;

PacManSprite = (function() {
  function PacManSprite(name, initialNode, colour, spideyWall) {
    this.name = name;
    this.colour = colour;
    this.spideyWall = spideyWall;
    this.curLocation = {
      node: initialNode,
      linkIdx: -1,
      linkStep: 0
    };
    this.curDirection = {
      move: "forward",
      turn: "none"
    };
    this.angleOfTravel = 0;
    return;
  }

  PacManSprite.prototype.copyLocation = function() {
    this.oldLocation = {
      node: this.curLocation.node,
      linkIdx: this.curLocation.linkIdx,
      linkStep: this.curLocation.linkStep
    };
  };

  PacManSprite.prototype.show = function() {
    if (this.curLocation.linkIdx < 0) {
      this.spideyWall.setNodeColour(this.curLocation.node, true, this.colour);
    } else {
      this.spideyWall.setLinkColour(this.curLocation.node, this.curLocation.linkIdx, this.curLocation.linkStep, true, this.colour);
    }
  };

  PacManSprite.prototype.dist = function(x1, y1, x2, y2) {
    return Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));
  };

  PacManSprite.prototype.angle = function(x1, y1, x2, y2) {
    return Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
  };

  PacManSprite.prototype.moveMe = function() {
    var angleDiff, bestLinkIdx, linkAngle, linkIdx, nearestAngle, reqdAngle, _i, _ref;
    this.copyLocation();
    if (this.curLocation.linkIdx < 0) {
      bestLinkIdx = 0;
      reqdAngle = this.curDirection.turn === "right" ? this.angleOfTravel + 90 : this.curDirection.turn === "left" ? this.angleOfTravel - 90 : this.angleOfTravel;
      reqdAngle = reqdAngle > 180 ? reqdAngle - 360 : reqdAngle < -180 ? reqdAngle + 360 : reqdAngle;
      nearestAngle = 360;
      for (linkIdx = _i = 0, _ref = this.spideyWall.getNumLinks(this.curLocation.node); 0 <= _ref ? _i < _ref : _i > _ref; linkIdx = 0 <= _ref ? ++_i : --_i) {
        linkAngle = this.spideyWall.getLinkAngle(this.curLocation.node, linkIdx);
        angleDiff = Math.abs(reqdAngle - linkAngle);
        angleDiff = angleDiff > 180 ? 360 - angleDiff : angleDiff;
        if (nearestAngle > angleDiff) {
          nearestAngle = angleDiff;
          bestLinkIdx = linkIdx;
        }
      }
      this.curLocation.linkIdx = bestLinkIdx;
      this.curLocation.linkStep = 0;
    } else {
      if (this.curDirection.move === "back") {
        this.curLocation.linkStep -= 1;
        if (this.curLocation.linkStep < 0) {
          this.curLocation.linkStep = 0;
          this.curLocation.linkIdx = -1;
          this.curDirection.move = "forward";
        }
      } else {
        this.curLocation.linkStep += 1;
        if (this.curLocation.linkStep >= this.spideyWall.getLinkLength(this.curLocation.node, this.curLocation.linkIdx)) {
          this.curLocation.node = this.spideyWall.getLinkTarget(this.curLocation.node, this.curLocation.linkIdx);
          this.curLocation.linkIdx = -1;
          this.curLocation.linkStep = 0;
        }
      }
      if (this.curLocation.linkIdx < 0) {
        this.angleOfTravel = this.spideyWall.getLinkAngle(this.oldLocation.node, this.oldLocation.linkIdx);
      }
    }
  };

  PacManSprite.prototype.moveBaddie = function(me) {
    var bestLinkIdx, linkDist, linkIdx, linkTarget, linkTargetXY, meXY, minDist, _i, _ref;
    this.copyLocation();
    if (this.curLocation.linkIdx < 0) {
      meXY = this.spideyWall.getNodeXY(me.curLocation.node);
      minDist = 100000;
      bestLinkIdx = 0;
      for (linkIdx = _i = 0, _ref = this.spideyWall.getNumLinks(this.curLocation.node); 0 <= _ref ? _i < _ref : _i > _ref; linkIdx = 0 <= _ref ? ++_i : --_i) {
        linkTarget = this.spideyWall.getLinkTarget(this.curLocation.node, linkIdx);
        linkTargetXY = this.spideyWall.getNodeXY(linkTarget);
        linkDist = this.dist(meXY.x, meXY.y, linkTargetXY.x, linkTargetXY.y);
        if (minDist > linkDist) {
          minDist = linkDist;
          bestLinkIdx = linkIdx;
        }
      }
      this.curLocation.linkIdx = bestLinkIdx;
      this.curLocation.linkStep = 0;
    } else {
      this.curLocation.linkStep += 1;
      if (this.curLocation.linkStep >= this.spideyWall.getLinkLength(this.curLocation.node, this.curLocation.linkIdx)) {
        this.curLocation.node = this.spideyWall.getLinkTarget(this.curLocation.node, this.curLocation.linkIdx);
        this.curLocation.linkIdx = -1;
        this.curLocation.linkStep = 0;
      }
    }
  };

  return PacManSprite;

})();
