// Generated by CoffeeScript 1.8.0
var SpideyAppUI,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

SpideyAppUI = (function() {
  function SpideyAppUI() {
    this.mouseMoveJoystick = __bind(this.mouseMoveJoystick, this);
    this.rebuildUI = __bind(this.rebuildUI, this);
    this.mediaPlayHelper = new MediaPlayHelper({
      click: "assets/click.mp3",
      ok: "assets/blip.mp3",
      fail: "assets/fail.mp3"
    });
    this.origBackdropSize = {
      width: 504,
      height: 720
    };
    this.curJoystickDirn = null;
    this.curJoystickDist = 0;
  }

  SpideyAppUI.prototype.init = function(spideyWall) {
    var canvas;
    $("html").css({
      background: "#000000"
    });
    $("body").prepend("<div id=\"sqWrapper\">\n		        <canvas id=\"spideyCanvas\" \n		        	width=\"" + this.origBackdropSize.width + "\" \n		        	height=\"" + this.origBackdropSize.height + "\" \n		        	style=\"position: absolute; left: 0px; border: 0px; \"></canvas>\n	<div id=\"gamesAvailable\">\n	</div>\n	<div id=\"gamebuttons\" style=\"position:absolute;\">\n	</div>\n</div>");
    canvas = document.getElementById("spideyCanvas").getContext("2d");
    spideyWall.setCanvas(canvas);
    $(window).on('orientationchange', (function(_this) {
      return function() {
        return _this.rebuildUI();
      };
    })(this));
    $(window).on('resize', (function(_this) {
      return function() {
        return _this.rebuildUI();
      };
    })(this));
    this.buttonColours = ["red", "green", "blue", "brown"];
    this.nextButtonColour = 0;
    this.gamesAvail = {};
    return this.rebuildUI();
  };

  SpideyAppUI.prototype.rebuildUI = function() {
    var canvasLeft, canvasTop, origImgRatio, scaleHeight, scaleWidth, screenRatio;
    this.dispHeight = window.innerHeight;
    this.dispWidth = window.innerWidth;
    this.isLandscape = this.dispWidth > this.dispHeight;
    origImgRatio = this.origBackdropSize.width / this.origBackdropSize.height;
    screenRatio = this.dispWidth / this.dispHeight;
    if (origImgRatio < screenRatio) {
      scaleHeight = this.dispHeight;
      scaleWidth = this.dispHeight * origImgRatio;
    } else {
      scaleWidth = this.dispWidth;
      scaleHeight = this.dispWidth / origImgRatio;
    }
    canvasLeft = (this.dispWidth - scaleWidth) / 2;
    canvasTop = (this.dispHeight - scaleHeight) / 2;
    this.joystickSize = scaleWidth / 3;
    $("#spideyCanvas").css({
      "left": canvasLeft + "px",
      "top": canvasTop + "px",
      "width": scaleWidth + "px",
      "height": scaleHeight + "px"
    });
    $("#gamebuttons").css({
      "left": canvasLeft + 10 + "px",
      "top": canvasTop + (0.76 * scaleHeight) + "px",
      "width": this.joystickSize + "px",
      "height": this.joystickSize + "px"
    });
  };

  SpideyAppUI.prototype.setJoystickBall = function() {
    var ballMarginX, ballMarginY, ballMoveRadius, ballOffset, ballSize, dirnInRads;
    ballSize = this.joystickSize / 2;
    ballMarginX = this.joystickSize / 2 - ballSize / 2;
    ballMarginY = this.joystickSize / 2 - ballSize / 2;
    ballMoveRadius = this.joystickSize / 5;
    if (this.curJoystickDirn != null) {
      dirnInRads = this.curJoystickDirn * Math.PI / 180;
      ballOffset = Math.min(this.curJoystickDist, ballMoveRadius);
      ballMarginX += Math.cos(dirnInRads) * ballOffset;
      ballMarginY += Math.sin(dirnInRads) * ballOffset;
    }
    $("#sqJoystickBall img").css({
      "margin-left": ballMarginX + "px",
      "margin-top": ballMarginY + "px",
      "width": ballSize + "px",
      "height": ballSize + "px"
    });
  };

  SpideyAppUI.prototype.mouseMoveJoystick = function(event) {
    var ballCentreX, ballCentreY, joystickPos, relX, relY;
    ballCentreX = this.joystickSize / 2;
    ballCentreY = this.joystickSize / 2;
    joystickPos = $(".sqJoystick").offset();
    relX = event.pageX - joystickPos.left;
    relY = event.pageY - joystickPos.top;
    this.curJoystickDirn = Math.atan2(relY - ballCentreY, relX - ballCentreX) * 180 / Math.PI;
    this.curJoystickDist = Math.sqrt((relY - ballCentreY) * (relY - ballCentreY) + (relX - ballCentreX) * (relX - ballCentreX));
    this.setJoystickBall();
    this.directionCallback(this.curJoystickDirn);
  };

  SpideyAppUI.prototype.showGameUI = function(showIt) {
    $("#gamebuttons").show();
  };

  SpideyAppUI.prototype.showGamePad = function(tlx, tly, directionCallback, small) {
    this.directionCallback = directionCallback;
    $("#gamebuttons").append("<div class=\"sqJoystick\" style=\"display:block; opacity:1;\">\n	<div class=\"sqJoystickImg\" style=\"position:absolute;\" >\n		<img width=\"100%\" height=\"100%\" src=\"img/joystickbase.png\"></img>\n	</div>\n	<div id=\"sqJoystickBall\" style=\"position:absolute;\" >\n		<img width=\"50%\" height=\"50%\" src=\"img/joystickball.png\" style=\"margin-top:30%;margin-left:31%\"></img>\n	</div>\n</div>");
    $(".sqJoystick").on("mousemove", this.mouseMoveJoystick);
  };

  return SpideyAppUI;

})();
