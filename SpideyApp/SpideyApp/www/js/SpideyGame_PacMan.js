// Generated by CoffeeScript 1.8.0
var SpideyGame_PacMan,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SpideyGame_PacMan = (function(_super) {
  __extends(SpideyGame_PacMan, _super);

  function SpideyGame_PacMan(spideyApp, spideyWall, spideyAppUI) {
    this.spideyApp = spideyApp;
    this.spideyWall = spideyWall;
    this.spideyAppUI = spideyAppUI;
    this.exitClick = __bind(this.exitClick, this);
    this.mouseDownTest = __bind(this.mouseDownTest, this);
    this.mouseMoveTest = __bind(this.mouseMoveTest, this);
    this.testStart = __bind(this.testStart, this);
    this.stepTest = __bind(this.stepTest, this);
    this.directionCallback = __bind(this.directionCallback, this);
    this.step = __bind(this.step, this);
    this.resizeCallback = __bind(this.resizeCallback, this);
    SpideyGame_PacMan.__super__.constructor.call(this, "PacMan", "pacman.svg");
    this.ghostHouseNode = 1;
    this.initGame();
    return;
  }

  SpideyGame_PacMan.prototype.initGame = function() {
    var numDots;
    this.pacmanSprite = new PacManSprite("pacman", 43, 0, 0, "#ffee00", true, 0, this.ghostHouseNode, this.spideyWall, this.spideyAppUI);
    numDots = this.spideyWall.getNumPoints();
    this.ghostSprites = [new PacManSprite("blinky", 73, 0, 0, "#ff0000", false, 0, this.ghostHouseNode, this.spideyWall, this.spideyAppUI), new PacManSprite("pinky", 79, numDots / 30, 0, "#ffc0cb", false, 1, this.ghostHouseNode, this.spideyWall, this.spideyAppUI), new PacManSprite("inky", 70, numDots / 10, 0, "#00bfff", false, 2, this.ghostHouseNode, this.spideyWall, this.spideyAppUI), new PacManSprite("clyde", 40, numDots / 3, 20, "#ff8000", false, 3, this.ghostHouseNode, this.spideyWall, this.spideyAppUI)];
    this.pillPositions = [
      {
        type: 1,
        pointIdx: 720,
        nodeIdx: 57,
        linkIdx: 2,
        linkStep: 5
      }, {
        type: 1,
        pointIdx: 268,
        nodeIdx: 15,
        linkIdx: 2,
        linkStep: 6
      }, {
        type: 1,
        pointIdx: 372,
        nodeIdx: 23,
        linkIdx: 0,
        linkStep: 2
      }, {
        type: 1,
        pointIdx: 624,
        nodeIdx: 47,
        linkIdx: 1,
        linkStep: 0
      }
    ];
    this.pacManDots = new PacManDots(this.pillPositions, 5, 1, this.spideyWall, this.spideyAppUI);
    this.spideyAppUI.setResizeCallback(this.resizeCallback);
    this.gameMode = 'scatter';
    this.gameCounter = 0;
    this.scatterInterval = 50;
    this.frightenedInterval = 200;
    this.ghostsEatenScore = 0;
    this.initGhostEatScore = 100;
    this.nextGhostEatScore = this.initGhostEatScore;
    this.scoreForDot = 10;
  };

  SpideyGame_PacMan.prototype.go = function(restart) {
    var ghost, _i, _len, _ref;
    if (restart) {
      this.initGame();
    }
    this.spideyAppUI.showGameUI(true);
    this.spideyAppUI.setDirectionCallback(this.directionCallback);
    _ref = this.ghostSprites;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ghost = _ref[_i];
      ghost.showInitially();
    }
    this.pacmanSprite.showInitially();
    this.pacManDots.showInitially();
    this.gameTimer = setInterval(this.step, 150);
    $("#spriteOverlay").on("mousemove", this.mouseMoveTest);
    $("#spriteOverlay").on("mousedown", this.mouseDownTest);
  };

  SpideyGame_PacMan.prototype.stop = function() {
    clearInterval(this.gameTimer);
  };

  SpideyGame_PacMan.prototype.resizeCallback = function() {
    var ghost, _i, _len, _ref;
    _ref = this.ghostSprites;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ghost = _ref[_i];
      ghost.resizeUI();
    }
    this.pacmanSprite.resizeUI();
    this.pacManDots.resizeUI();
  };

  SpideyGame_PacMan.prototype.updateSprites = function() {
    var ghost, _i, _len, _ref;
    _ref = this.ghostSprites;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ghost = _ref[_i];
      ghost.updateUI(this.gameMode);
    }
    this.pacmanSprite.updateUI(this.gameMode);
  };

  SpideyGame_PacMan.prototype.step = function() {
    var collision, dotType, ghost, _i, _len, _ref;
    this.pacmanSprite.movePacman();
    dotType = this.pacManDots.beEaten(this.pacmanSprite.getPositionPointIdx());
    if (dotType !== 0) {
      if (this.gameMode !== 'frightened') {
        this.prevGameMode = this.gameMode;
        this.nextGhostEatScore = this.initGhostEatScore;
      }
      this.gameMode = 'frightened';
      this.gameCounter = 0;
      console.log('FRIGHTENED');
    }
    _ref = this.ghostSprites;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ghost = _ref[_i];
      collision = ghost.moveGhost(this.gameMode, this.pacmanSprite, this.ghostSprites[0], this.pacManDots.getDotsEaten());
      if (collision) {
        if (this.gameMode === 'frightened') {
          this.ghostsEatenScore += this.nextGhostEatScore;
          this.nextGhostEatScore = this.nextGhostEatScore * 2;
          ghost.sendBackHome(this.pacManDots.getDotsEaten());
        } else {
          this.stop();
          this.spideyAppUI.showGameOver();
        }
      }
    }
    this.updateSprites();
    this.updateScore();
    this.gameCounter++;
    if (this.gameMode === 'frightened') {
      if (this.gameCounter > this.frightenedInterval) {
        this.gameCounter = 0;
        this.gameMode = this.prevGameMode;
        console.log(this.gameMode);
      }
    } else {
      if (this.gameCounter % this.scatterInterval === 0) {
        if (this.gameMode === 'scatter') {
          this.gameMode = 'chase';
          console.log("CHASE");
        } else {
          this.gameMode = 'scatter';
          console.log("SCATTER");
        }
        this.gameCounter = 0;
      }
    }
  };

  SpideyGame_PacMan.prototype.updateScore = function() {
    var curScore;
    curScore = this.pacManDots.getDotsEaten() * this.scoreForDot;
    curScore += this.ghostsEatenScore;
    return $("#gameScore").text(curScore.toString());
  };

  SpideyGame_PacMan.prototype.directionCallback = function(param) {
    this.changeDirection(param);
  };

  SpideyGame_PacMan.prototype.mouseover = function(dirn) {
    this.changeDirection(dirn);
  };

  SpideyGame_PacMan.prototype.changeDirection = function(dirn) {
    this.pacmanSprite.setDirection(dirn);
  };

  SpideyGame_PacMan.prototype.getDebugInfo = function() {
    return "N " + this.pacmanSprite.curLocation.node + " L " + this.pacmanSprite.curLocation.linkIdx + " S " + this.pacmanSprite.curLocation.linkStep;
  };

  SpideyGame_PacMan.prototype.stepTest = function() {
    this.spideyAppUI.preShowAll();
    this.spideyAppUI.sendLedCmd(this.testCurLed, "red");
    this.spideyAppUI.showAll();
    this.testCurLed += 1;
  };

  SpideyGame_PacMan.prototype.testStart = function() {
    this.testCurLed = 0;
    this.tmr = setInterval(this.stepTest, 50);
  };

  SpideyGame_PacMan.prototype.testEnd = function() {
    clearInterval(this.tmr);
  };

  SpideyGame_PacMan.prototype.mouseMoveTest = function(event) {
    var nodIdx, offs, point, pointIdx, spriteXY, xySpidey;
    offs = $("#spriteOverlay").offset();
    spriteXY = {
      x: event.pageX - offs.left,
      y: event.pageY - offs.top
    };
    xySpidey = this.spideyAppUI.getSpideyWallCoords(spriteXY);
    nodIdx = this.spideyWall.getNodeNearXY(xySpidey.x, xySpidey.y);
    pointIdx = this.spideyWall.getPointNearXY(xySpidey.x, xySpidey.y);
    point = this.spideyWall.getPoints()[pointIdx];
    console.log("X " + xySpidey.x + " Y " + xySpidey.y + " near nodeIdx " + nodIdx + " ptIdx " + pointIdx + " ptNodIdx " + point.nodeIdx + " lnkIdx " + point.linkIdx + " linkStep " + point.linkStep);
  };

  SpideyGame_PacMan.prototype.mouseDownTest = function(event) {
    var lidx, nodIdx, numLinks, offs, spriteXY, xySpidey, _i;
    offs = $("#spriteOverlay").offset();
    spriteXY = {
      x: event.pageX - offs.left,
      y: event.pageY - offs.top
    };
    xySpidey = this.spideyAppUI.getSpideyWallCoords(spriteXY);
    nodIdx = this.spideyWall.getNodeNearXY(xySpidey.x, xySpidey.y);
    console.log("X " + xySpidey.x + " Y " + xySpidey.y + " idx " + nodIdx);
    this.pacmanSprite.moveToNode(nodIdx);
    this.pacmanSprite.updateUI(this.gameMode);
    numLinks = this.spideyWall.getNumLinks(nodIdx);
    for (lidx = _i = 0; 0 <= numLinks ? _i < numLinks : _i > numLinks; lidx = 0 <= numLinks ? ++_i : --_i) {
      console.log(this.spideyWall.getLinkAngle(nodIdx, lidx, 1));
    }
  };

  SpideyGame_PacMan.prototype.exitClick = function() {
    clearInterval(this.gameTimer);
    this.spideyApp.exitGame();
  };

  return SpideyGame_PacMan;

})(SpideyGame);
