// Generated by CoffeeScript 1.8.0
var SpideyTalk;

SpideyTalk = (function() {
  function SpideyTalk() {
    this.execHtmlCmd = "http://macallan:5078/rawcmd/";
    this.enableExecHtml = false;
  }

  SpideyTalk.prototype.d2h = function(d) {
    return d.toString(16);
  };

  SpideyTalk.prototype.h2d = function(h) {
    return parseInt(h, 16);
  };

  SpideyTalk.prototype.zeropad = function(n, width, z) {
    z = z || '0';
    n = n + '';
    if (n.length >= width) {
      return n;
    } else {
      return new Array(width - n.length + 1).join(z) + n;
    }
  };

  SpideyTalk.prototype.execSpideyCmd = function(cmdParams) {
    if (this.enableExecHtml) {
      return $.ajax(cmdParams, {
        type: "GET",
        dataType: "text",
        success: (function(_this) {
          return function(data, textStatus, jqXHR) {};
        })(this),
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            return console.error("Direct exec command failed: " + textStatus + " " + errorThrown + " COMMAND=" + cmdParams);
          };
        })(this)
      });
    }
  };

  SpideyTalk.prototype.sendLedCmd = function(ledChainIdx, ledclr) {
    var clrStr, led;
    clrStr = ledclr === "green" ? "00ff00" : "ff0000";
    this.ipCmdBuf += "000802" + this.zeropad(this.d2h(ledChainIdx), 4) + "0001" + clrStr;
    if (this.canvas != null) {
      led = this.spideyGeometry.leds[ledChainIdx];
      this.canvas.fillStyle = ledclr;
      this.canvas.fillRect(led.x, led.y, 10, 10);
    }
  };

  SpideyTalk.prototype.preShowAll = function() {
    return this.ipCmdBuf = "";
  };

  SpideyTalk.prototype.showAll = function() {
    this.ipCmdBuf = "0000000101" + this.ipCmdBuf;
    this.execSpideyCmd(this.execHtmlCmd + this.ipCmdBuf);
  };

  SpideyTalk.prototype.setNodeColour = function(nodeIdx, disp, colour) {
    var node, nodeLed, _i, _len, _ref;
    node = this.spideyGeometry.nodes[nodeIdx];
    _ref = node.ledIdxs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      nodeLed = _ref[_i];
      this.sendLedCmd(nodeLed, colour);
    }
  };

  SpideyTalk.prototype.setLinkColour = function(nodeIdx, nodeLinkIdx, linkStep, disp, colour) {
    var edge, ledIdx, link, linkIdx, node, _i, _len, _ref;
    node = this.spideyGeometry.nodes[nodeIdx];
    linkIdx = node.linkIdxs[nodeLinkIdx];
    link = this.spideyGeometry.links[linkIdx];
    _ref = link.padEdges;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      edge = _ref[_i];
      if (linkStep < edge.ledIdxs.length) {
        ledIdx = edge.ledIdxs[linkStep];
        this.sendLedCmd(ledIdx, colour);
      }
    }
  };

  return SpideyTalk;

})();
