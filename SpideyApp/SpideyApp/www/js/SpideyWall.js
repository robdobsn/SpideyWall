// Generated by CoffeeScript 1.8.0
var SpideyWall;

SpideyWall = (function() {
  function SpideyWall() {}

  SpideyWall.prototype.d2h = function(d) {
    return d.toString(16);
  };

  SpideyWall.prototype.h2d = function(h) {
    return parseInt(h, 16);
  };

  SpideyWall.prototype.zeropad = function(n, width, z) {
    z = z || '0';
    n = n + '';
    if (n.length >= width) {
      return n;
    } else {
      return new Array(width - n.length + 1).join(z) + n;
    }
  };

  SpideyWall.prototype.execSpideyCmd = function(cmdParams) {
    console.log("Sending " + cmdParams);
    return $.ajax(cmdParams, {
      type: "GET",
      dataType: "text",
      success: (function(_this) {
        return function(data, textStatus, jqXHR) {};
      })(this),
      error: (function(_this) {
        return function(jqXHR, textStatus, errorThrown) {
          return console.error("Direct exec command failed: " + textStatus + " " + errorThrown + " COMMAND=" + cmdParams);
        };
      })(this)
    });
  };

  SpideyWall.prototype.sendLedCmd = function(ledChainIdx, ledclr) {
    var clrStr;
    clrStr = ledclr === "white" ? "000000" : "800000";
    if (ledclr !== "white") {
      this.ipCmdBuf += "000802" + this.zeropad(this.d2h(ledChainIdx), 4) + "0001" + clrStr;
    }
  };

  SpideyWall.prototype.setNodeColour = function(nodeIdx, disp, colour) {
    var dbg, node, nodeLed, _i, _len, _ref;
    node = this.spideyGraph.nodeList[nodeIdx];
    dbg = "";
    _ref = node.leds;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      nodeLed = _ref[_i];
      if (disp) {
        nodeLed.led.clr = colour;
      } else {
        nodeLed.led.clr = "white";
      }
      this.sendLedCmd(nodeLed.led.chainIdx, nodeLed.led.clr);
      dbg += "P" + nodeLed.padIdx + " X" + nodeLed.ledIdx + " C" + nodeLed.led.chainIdx + ", ";
    }
    $('#DebugInfo2').text(dbg);
  };

  SpideyWall.prototype.setLinkColour = function(nodeIdx, linkIdx, linkStep, disp, colour) {
    var dbg, edgeLeds, led, link, node, _i, _len, _ref;
    node = this.spideyGraph.nodeList[nodeIdx];
    link = node.edgesTo[linkIdx];
    dbg = "";
    if (linkStep < link.edgeList.length) {
      _ref = link.edgeList[linkStep];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        edgeLeds = _ref[_i];
        led = edgeLeds.led;
        dbg += "P" + led.padIdx + " X" + led.ledIdx + " C" + led.chainIdx + ", ";
        if (disp) {
          led.clr = colour;
        } else {
          led.clr = "white";
        }
        this.sendLedCmd(led.chainIdx, led.clr);
      }
    } else {
      dbg = "ListLenErr";
    }
    $('#DebugInfo2').text(dbg);
  };

  SpideyWall.prototype.getNodeXY = function(nodeIdx) {
    return this.spideyGraph.nodeList[nodeIdx].CofG.pt;
  };

  SpideyWall.prototype.getLinkLedXY = function(nodeIdx, linkIdx, linkStep) {
    return this.spideyGraph.nodeList[nodeIdx].edgesTo[linkIdx].edgeList[linkStep][0].led.pt;
  };

  SpideyWall.prototype.getNumLinks = function(nodeIdx) {
    return this.spideyGraph.nodeList[nodeIdx].edgesTo.length;
  };

  SpideyWall.prototype.getLinkLength = function(nodeIdx, linkIdx) {
    return this.spideyGraph.nodeList[nodeIdx].edgesTo[linkIdx].edgeList.length;
  };

  SpideyWall.prototype.getLinkTarget = function(nodeIdx, linkIdx) {
    return this.spideyGraph.nodeList[nodeIdx].edgesTo[linkIdx].toNodeIdx;
  };

  SpideyWall.prototype.preShowAll = function() {
    return this.ipCmdBuf = "";
  };

  SpideyWall.prototype.showAll = function() {
    this.ipCmdBuf = "0000000101" + this.ipCmdBuf;
    this.execSpideyCmd("http://macallan:5078/rawcmd/" + this.ipCmdBuf);
  };

  return SpideyWall;

})();
