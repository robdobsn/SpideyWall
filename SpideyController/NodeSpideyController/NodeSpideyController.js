// Generated by CoffeeScript 1.8.0
(function() {
  var JSON, ObjectID, SPIDEY_WEBSERVER_PORT, app, args, bodyParser, cmdCount, express, http, mongoDb, mongoDbCollection, mongoDbUri, mongodb, path, spidey, spideyUdp, spidey_UDP_IP, spidey_UDP_port;

  http = require('http');

  express = require('express');

  bodyParser = require('body-parser');

  mongodb = require('mongodb');

  path = require('path');

  JSON = require('JSON');

  spideyUdp = require('./spideyUdp');

  ObjectID = require('mongodb').ObjectID;

  spidey_UDP_IP = "192.168.0.227";

  spidey_UDP_port = 7;

  SPIDEY_WEBSERVER_PORT = 5078;

  mongoDbUri = 'mongodb://macallan:27017/SpideyWall';

  args = process.argv.slice(2);

  if (args[0] != null) {
    mongoDbUri = "mongodb://" + args[0] + ":27017/SpideyWall";
  }

  console.log("Spidey Wall Web Server on Port " + SPIDEY_WEBSERVER_PORT + " - using " + mongoDbUri);

  spidey = new spideyUdp.SpideyUDP(spidey_UDP_IP, spidey_UDP_port);

  app = express();

  app.set('port', process.env.PORT || SPIDEY_WEBSERVER_PORT);

  app.set('views', path.join(__dirname, 'views'));

  app.set('view engine', 'jade');

  app.use(bodyParser.json());

  app.all('*', function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    return next();
  });

  app.use('/', express["static"](__dirname + '/static'));

  mongoDbCollection = null;

  mongoDb = null;

  app.get('/scripts', function(req, res) {
    console.log("Get all scripts");
    mongoDbCollection.find({}, {
      "id": true,
      "name": true
    }).toArray(function(err, docs) {
      if (err) {
        console.error("Error finding SpideyScripts");
        res.send("{}");
      } else if (docs === null) {
        console.error("Error finding SpideyScripts - doc null");
        res.send("{}");
      } else {
        res.send(docs);
      }
    });
  });

  app.get('/scripts/:id', function(req, res) {
    console.log("Get scripts id = " + req.params.id);
    mongoDbCollection.findOne({
      _id: new ObjectID(req.params.id)
    }, function(err, doc) {
      if (err !== null) {
        console.error("Error finding SpideyScripts");
        res.send("{}");
      } else if (!doc) {
        console.error("Error finding SpideyScripts - doc null" + doc);
        res.send("{}");
      } else {
        console.log("Found SpideyScripts");
        res.send(doc);
      }
    });
  });

  app.post('/scripts', function(req, res) {
    var isUpdate, newScript, scriptName;
    console.log("Create/Update script ");
    isUpdate = req.body.isUpdate;
    scriptName = req.body.name.trim();
    if (scriptName === "") {
      console.log("Name can't be blank");
      res.send({
        error: "nameisblank",
        ok: false
      });
      return;
    }
    newScript = req.body;
    newScript.name = scriptName;
    mongoDbCollection.findOne({
      name: scriptName
    }, function(err, doc) {
      if (err !== null) {
        console.log("Error in find script " + scriptName);
        res.send({
          msg: err.message,
          error: "errorinfind",
          ok: false
        });
      } else if (doc !== null) {
        if (isUpdate) {
          mongoDbCollection.update({
            name: scriptName
          }, newScript);
          console.log("Updated script ok .. id = " + newScript._id);
          res.send({
            ok: true
          });
        } else {
          console.log("Name exists already");
          res.send({
            error: "nameexists",
            ok: false
          });
        }
      } else {
        mongoDbCollection.save(newScript);
        console.log("Saved new script ok");
        res.send({
          ok: true
        });
      }
    });
  });

  app["delete"]('/scripts/:id', function(req, res) {
    console.log("Delete script id = " + req.params.id);
    mongoDbCollection.findOne({
      _id: new ObjectID(req.params.id)
    }, function(err, doc) {
      if (doc === null) {
        console.log("Script to delete not found");
        return res.send({
          error: "Not found",
          ok: false
        });
      }
      return mongoDbCollection.remove({
        _id: new ObjectID(req.params.id)
      }, function(err, numberOfRemovedDocs) {
        if (err) {
          conole.log("Script delete failed");
          res.send({
            error: "deletefailed",
            msg: err.message,
            ok: false
          });
        } else {
          console.log("Script deleted ok - removed num docs = " + numberOfRemovedDocs);
          res.send({
            ok: true
          });
        }
      });
    });
  });

  cmdCount = 0;

  app.get('/rawcmd/:spideycommand', function(req, res) {
    var spideycommand;
    spideycommand = req.params.spideycommand;
    spidey.execCmd(spideycommand);
    cmdCount++;
    return res.send("ok");
  });

  app.use(function(req, res) {
    return res.render('404', {
      url: req.url
    });
  });

  mongodb.MongoClient.connect(mongoDbUri, (function(_this) {
    return function(err, database) {
      if (err) {
        console.error("Error! MongoDB must be running ... " + err.message + "Shutting down");
        process.exit(1);
      }
      mongoDb = database;
      mongoDbCollection = mongoDb.collection('SpideyScripts');
      return http.createServer(app).listen(app.get('port'), function() {
        return console.log('Spidey server listening on port ' + app.get('port'));
      });
    };
  })(this));

}).call(this);
