// Generated by CoffeeScript 1.8.0
(function() {
  var dgram,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  dgram = require('dgram');

  this.SpideyUDP = (function() {
    SpideyUDP.prototype.serverReady = false;

    SpideyUDP.prototype.spideyCmds = [];

    SpideyUDP.prototype.senderBusy = false;

    SpideyUDP.prototype.seqCount = 0;

    SpideyUDP.prototype.udpTimeout = null;

    SpideyUDP.prototype.MAX_QUEUED_CMDS = 10;

    function SpideyUDP(spidey_UDP_IP, spidey_udp_port) {
      this.spidey_UDP_IP = spidey_UDP_IP;
      this.spidey_udp_port = spidey_udp_port;
      this.timedOut = __bind(this.timedOut, this);
      this.server = dgram.createSocket("udp4");
      this.server.on("error", (function(_this) {
        return function(err) {
          console.log("server error:\n" + err.stack);
          _this.server.close();
        };
      })(this));
      this.server.on("message", (function(_this) {
        return function(msg, rinfo) {
          console.log("server got: .." + msg + ".. from " + rinfo.address + ":" + rinfo.port);
          if (msg.toString().indexOf("OK") === 5) {
            clearTimeout(_this.udpTimeout);
            _this.senderBusy = false;
            if (_this.spideyCmds.length > 0) {
              _this.sendCmd(_this.spideyCmds.shift());
            }
          }
        };
      })(this));
      this.server.on("listening", (function(_this) {
        return function() {
          var address;
          address = _this.server.address();
          console.log("server listening " + address.address + ":" + address.port);
          return _this.serverReady = true;
        };
      })(this));
      this.server.bind(this.spidey_udp_port);
    }

    SpideyUDP.prototype.execCmd = function(cmdStr) {
      var seqCmdStr;
      seqCmdStr = this.toHex(this.seqCount++, 4) + cmdStr.slice(4);
      if (this.senderBusy) {
        if (this.spideyCmds.length < this.MAX_QUEUED_CMDS) {
          return this.spideyCmds.push(seqCmdStr);
        }
      } else {
        return this.sendCmd(seqCmdStr);
      }
    };

    SpideyUDP.prototype.timedOut = function() {
      console.log("Timedout");
      this.senderBusy = false;
      if (this.spideyCmds.length > 0) {
        console.log("Sending again after timeout");
        return this.sendCmd(this.spideyCmds.shift());
      }
    };

    SpideyUDP.prototype.sendCmd = function(cmdStr) {
      var cmdmsg;
      this.senderBusy = true;
      this.udpTimeout = setTimeout(this.timedOut, 500);
      cmdmsg = new Buffer(cmdStr, 'hex');
      this.server.send(cmdmsg, 0, cmdmsg.length, this.spidey_udp_port, this.spidey_UDP_IP, (function(_this) {
        return function(err, bytes) {
          if (err) {
            console.log("UDP send error = " + err);
            throw err;
          } else {
            return console.log("UDP sent " + bytes + " bytes");
          }
        };
      })(this));
    };

    SpideyUDP.prototype.toHex = function(val, digits) {
      return ("00000000" + val.toString(16)).slice(-digits);
    };

    return SpideyUDP;

  })();

}).call(this);
