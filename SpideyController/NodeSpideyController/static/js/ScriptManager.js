// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.ScriptManager = (function() {
    function ScriptManager(displayManager) {
      this.displayManager = displayManager;
      this.closeScript = __bind(this.closeScript, this);
      this.stopScript = __bind(this.stopScript, this);
      this.runScript = __bind(this.runScript, this);
      this.saveScript = __bind(this.saveScript, this);
      this.newScript = __bind(this.newScript, this);
      this.deleteScript = __bind(this.deleteScript, this);
      this.editScript = __bind(this.editScript, this);
      this.init();
    }

    ScriptManager.prototype.init = function() {
      this.editor = ace.edit("editor");
      this.editor.setTheme("ace/theme/chrome");
      this.editor.getSession().setMode("ace/mode/javascript");
      this.addButtons();
      this.showScriptList();
    };

    ScriptManager.prototype.editScript = function(scriptId) {
      console.log("edit script " + scriptId);
      this.selectScript(scriptId);
    };

    ScriptManager.prototype.deleteScript = function(scriptId) {
      console.log("delete script " + scriptId);
      if (!confirm("Delete script?")) {
        return;
      }
      $.ajax("/scripts/" + scriptId, {
        type: "DELETE",
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log("Delete script by id AJAX Error: " + textStatus);
        },
        success: (function(_this) {
          return function(data, textStatus, jqXHR) {
            console.log("Delete script by id successful AJAX call: " + data.ok);
            console.log("script = " + scriptId);
            return _this.showScriptList();
          };
        })(this)
      });
    };

    ScriptManager.prototype.newScript = function() {
      this.showScript("New Script", "");
    };

    ScriptManager.prototype.saveScript = function() {
      var code, jqXHR, newScript, scriptName;
      code = this.editor.getSession().getValue();
      console.log(btoa(code));
      scriptName = $("input[name=script-name]").val().trim();
      newScript = {
        isUpdate: this.scriptAtStart.name === scriptName,
        name: scriptName,
        code: btoa(code)
      };
      jqXHR = $.ajax("/scripts", {
        type: "POST",
        data: JSON.stringify(newScript),
        dataType: "json",
        contentType: "application/json",
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            console.log("AJAX Error: " + textStatus);
            return $(".spideyStatus").text(textStatus);
          };
        })(this),
        success: (function(_this) {
          return function(data, textStatus, jqXHR) {
            console.log("Successful AJAX call: " + data.ok);
            if (data.ok) {
              return _this.showScriptList();
            } else {
              return $(".spideyStatus").text(data.error === "nameexists" ? "Script name already exists" : "nameisblank" ? "Script name can't be blank" : data.error);
            }
          };
        })(this)
      });
    };

    ScriptManager.prototype.runScript = function(event, scriptId) {
      var code;
      if (scriptId != null) {
        return $.ajax("/scripts/" + scriptId, {
          type: "GET",
          error: (function(_this) {
            return function(jqXHR, textStatus, errorThrown) {
              return console.log("Get to run script by id AJAX Error: " + textStatus);
            };
          })(this),
          success: (function(_this) {
            return function(data, textStatus, jqXHR) {
              console.log("Get to run script by id successful AJAX call: " + data.name);
              return _this.doScript(atob(data.code));
            };
          })(this)
        });
      } else {
        code = this.editor.getSession().getValue();
        return this.doScript(code);
      }
    };

    ScriptManager.prototype.doScript = function(code) {
      window.draw = function() {};
      window.clear("#000000");
      this.displayManager.stop();
      eval(code);
      this.displayManager.start();
    };

    ScriptManager.prototype.stopScript = function() {
      this.displayManager.stop();
    };

    ScriptManager.prototype.closeScript = function() {
      if (this.scriptChanged) {
        if (confirm('Discard changes?')) {
          this.showScriptList();
        } else {
          return;
        }
      } else {
        this.showScriptList();
      }
    };

    ScriptManager.prototype.addButtons = function() {
      var btnDef, butInfo, butInfos, _i, _len;
      butInfos = [
        {
          caption: "Run",
          clickfn: this.runScript,
          "class": "spidey-run-script"
        }, {
          caption: "Stop",
          clickfn: this.stopScript,
          "class": "spidey-stop-script"
        }, {
          caption: "Save",
          clickfn: this.saveScript,
          "class": "spidey-save-script"
        }, {
          caption: "Close",
          clickfn: this.closeScript,
          "class": "spidey-close-script"
        }, {
          caption: "New",
          clickfn: this.newScript,
          "class": "spidey-new-script"
        }
      ];
      for (_i = 0, _len = butInfos.length; _i < _len; _i++) {
        butInfo = butInfos[_i];
        btnDef = "<a class=\"small round button " + butInfo["class"] + "\">" + butInfo.caption + "</a>";
        $(".script-button-row").append(btnDef);
        $("." + butInfo["class"]).on('click', butInfo.clickfn);
      }
    };

    ScriptManager.prototype.selectScript = function(scriptId) {
      $.ajax("/scripts/" + scriptId, {
        type: "GET",
        error: (function(_this) {
          return function(jqXHR, textStatus, errorThrown) {
            return console.log("Get script by id AJAX Error: " + textStatus);
          };
        })(this),
        success: (function(_this) {
          return function(data, textStatus, jqXHR) {
            console.log("Get script by id successful AJAX call: " + data.name);
            return _this.showScript(data.name, atob(data.code));
          };
        })(this)
      });
    };

    ScriptManager.prototype.showScriptList = function() {
      $(".spidey-new-script").show();
      $(".spidey-run-script").hide();
      $(".spidey-stop-script").show();
      $(".spidey-close-script").hide();
      $(".spidey-scripts").show();
      $("#editor").hide();
      $(".script-name").hide();
      $(".spidey-save-script").hide();
      this.getAllSnippets();
    };

    ScriptManager.prototype.showScript = function(scriptName, scriptCode) {
      $(".spidey-new-script").hide();
      $(".spidey-run-script").show();
      $(".spidey-stop-script").show();
      $(".spidey-close-script").show();
      $(".spidey-scripts").hide();
      $("#editor").show();
      $(".script-name").show();
      $(".script-name").empty().append('<input type="text" name="script-name"/>');
      $("input[name=script-name]").val(scriptName);
      this.editor.getSession().setValue(scriptCode);
      this.scriptAtStart = {
        name: scriptName,
        code: scriptCode
      };
      $(".spidey-save-script").show();
      this.scriptChanged = false;
      this.editor.on("change", (function(_this) {
        return function() {
          return _this.scriptChanged = true;
        };
      })(this));
    };

    ScriptManager.prototype.getAllSnippets = function() {
      var jqXHR;
      jqXHR = $.getJSON("/scripts", (function(_this) {
        return function(data) {
          var items;
          items = [];
          $.each(data, function(idx, script) {
            items.push("<tr>\n<td class=\"script-title\">" + script.name + "</td>\n<td><a class=\"small button\" id=\"edit-script-" + idx + "\">Edit</a></td>\n<td><a class=\"small button\" id=\"delete-script-" + idx + "\">Del</a></td>\n<td><a class=\"small button\" id=\"run-script-" + idx + "\">Run</a></td>\n</tr>");
          });
          $(".scripts-list").empty();
          $("<tbody/>", {
            "class": "script-list-body",
            html: items.join("")
          }).appendTo(".scripts-list");
          $.each(data, function(idx, script) {
            $("#edit-script-" + idx).on('click', function() {
              _this.editScript(script._id);
            });
            $("#delete-script-" + idx).on('click', function() {
              _this.deleteScript(script._id);
            });
            return $("#run-script-" + idx).on('click', function() {
              _this.runScript(null, script._id);
            });
          });
        };
      })(this));
      jqXHR.fail((function(_this) {
        return function(jqxhr, textStatus, error) {
          var err;
          err = textStatus + ", " + error;
          console.log("Request Failed: " + err);
        };
      })(this));
      jqXHR.always((function(_this) {
        return function() {};
      })(this));
    };

    return ScriptManager;

  })();

}).call(this);
