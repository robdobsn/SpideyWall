// Generated by CoffeeScript 1.7.1
var deleteScript, editScript, getAllSnippets, initSpidey, loadSpideyGeom, selectScript, show, showScriptList, showSpideyLeds, spideyNewScript, spideyRunScript, spideySaveScript, spideyShowScript;

getAllSnippets = function() {
  var jqXHR;
  jqXHR = $.getJSON("/scripts", function(data) {
    var items, spideyScripts;
    items = [];
    spideyScripts = data;
    $.each(data, function(idx, script) {
      items.push("<tr>\n<td class=\"script-title\">" + script.name + "</td>\n<td><a onclick=\"editScript('" + script._id + "');\" class=\"small button\" id=\"edit-script-" + idx + "\">Edit</a></td>\n<td><a onclick=\"deleteScript('" + script._id + "');\" class=\"small button\" id=\"delete-script-" + idx + "\">Del</a></td>\n</tr>");
    });
    $(".scripts-list").empty();
    $("<tbody/>", {
      "class": "script-list-body",
      html: items.join("")
    }).appendTo(".scripts-list");
  });
  jqXHR.fail(function(jqxhr, textStatus, error) {
    var err;
    err = textStatus + ", " + error;
    console.log("Request Failed: " + err);
  });
  jqXHR.always(function() {
    console.log("always");
  });
};

editScript = function(scriptId) {
  return selectScript(scriptId);
};

deleteScript = function(scriptId) {
  console.log("delete script " + scriptId);
  $.ajax("/scripts/" + scriptId, {
    type: "DELETE",
    error: function(jqXHR, textStatus, errorThrown) {
      return console.log("Delete script by id AJAX Error: " + textStatus);
    },
    success: function(data, textStatus, jqXHR) {
      console.log("Delete script by id successful AJAX call: " + data.ok);
      console.log("script = " + scriptId);
      return showScriptList();
    }
  });
};

selectScript = function(scriptId) {
  $.ajax("/scripts/" + scriptId, {
    type: "GET",
    error: function(jqXHR, textStatus, errorThrown) {
      return console.log("Get script by id AJAX Error: " + textStatus);
    },
    success: function(data, textStatus, jqXHR) {
      console.log("Get script by id successful AJAX call: " + data.ok);
      console.log("script = " + scriptId);
      console.log("code = " + atob(data.code));
      return spideyShowScript(data.name, atob(data.code));
    }
  });
};

initSpidey = function() {
  window.editor = ace.edit("editor");
  window.editor.setTheme("ace/theme/chrome");
  window.editor.getSession().setMode("ace/mode/javascript");
  $("#spideyGeom").appendTo(".spideySvgImg");
  $("#spideyGeom").show();
  showScriptList();
  loadSpideyGeom();
};

showSpideyLeds = function() {
  window.spideyDrawing.padLeds = window.spideyDrawing.d3PadsSvg.selectAll("g.padLeds").data(window.spideyGeom.pads).enter().append("g").attr("class", "padLeds");
  return window.spideyDrawing.ledsSel = window.spideyDrawing.padLeds.selectAll(".led").data(function(d, i) {
    return d.leds;
  }).enter().append("circle").attr("class", "led").attr("cx", function(d) {
    return window.spideyGeom.leds[d.ledIdx].centre.x;
  }).attr("cy", function(d) {
    return window.spideyGeom.leds[d.ledIdx].centre.y;
  }).attr("r", window.spideyDrawing.ledUISize).attr("fill", function(d, i) {
    return window.spideyGeom.leds[d.ledIdx].colour;
  });
};

loadSpideyGeom = function() {
  var jqXHR;
  return jqXHR = $.getJSON("/SpideyGeometry.json", function(data) {
    var led, _i, _len, _ref;
    window.spideyGeom = data;
    console.log("LoadedSpideyGeom");
    _ref = window.spideyGeom.leds;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      led = _ref[_i];
      led.colour = "#DCDCDC";
    }
    window.spideyDrawing = {
      ledUISize: 3
    };
    window.spideyDrawing.d3PadsSvg = d3.select(".spideySvgImg svg");
    window.spideyDrawing.padOutlines = window.spideyDrawing.d3PadsSvg.selectAll("path");
    showSpideyLeds();
    return window.LEDS = window.spideyGeom.leds;
  });
};

showScriptList = function() {
  $(".spidey-new-script").show();
  $(".spidey-scripts").show();
  $("#editor").hide();
  $(".script-name").hide();
  $(".spidey-save-script").hide();
  getAllSnippets();
};

spideyNewScript = function() {
  return spideyShowScript("New Script", "");
};

spideyShowScript = function(scriptName, scriptCode) {
  $(".spidey-new-script").hide();
  $(".spidey-scripts").hide();
  $("#editor").show();
  $(".script-name").show();
  $(".script-name").empty().append('<input type="text" name="script-name"/>');
  $("input[name=script-name]").val(scriptName);
  window.editor.getSession().setValue(scriptCode);
  window.spideyScriptAtStart = {
    name: scriptName,
    code: scriptCode
  };
  $(".spidey-save-script").show();
};

spideySaveScript = function() {
  var code, jqXHR, newScript, scriptName;
  code = window.editor.getSession().getValue();
  console.log(btoa(code));
  scriptName = $("input[name=script-name]").val().trim();
  newScript = {
    isUpdate: window.spideyScriptAtStart.name === scriptName,
    name: scriptName,
    code: btoa(code)
  };
  jqXHR = $.ajax("/scripts", {
    type: "POST",
    data: JSON.stringify(newScript),
    dataType: "json",
    contentType: "application/json",
    error: function(jqXHR, textStatus, errorThrown) {
      console.log("AJAX Error: " + textStatus);
      return $(".spideyStatus").text(textStatus);
    },
    success: function(data, textStatus, jqXHR) {
      console.log("Successful AJAX call: " + data.ok);
      if (data.ok) {
        return showScriptList();
      } else {
        return $(".spideyStatus").text(data.error === "nameexists" ? "Script name already exists" : "nameisblank" ? "Script name can't be blank" : data.error);
      }
    }
  });
};

spideyRunScript = function() {
  var code;
  code = window.editor.getSession().getValue();
  eval(code);
};

show = function() {
  return window.spideyDrawing.ledsSel.attr("fill", function(d) {
    return d.colour;
  });
};
