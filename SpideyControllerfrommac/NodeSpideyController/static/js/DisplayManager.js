// Generated by CoffeeScript 1.8.0
(function() {
  this.DisplayManager = (function() {
    var rgbColour;

    DisplayManager.prototype.ledUISize = 3;

    function DisplayManager() {
      $("#spideyGeom").appendTo(".spideySvgImg");
      $("#spideyGeom").show();
      this.loadSpideyGeom();
    }

    DisplayManager.prototype.stop = function() {
      return this.d3TimerStop = true;
    };

    DisplayManager.prototype.start = function() {
      this.d3TimerStop = false;
      return d3.timer(spideyDrawFunction);
    };

    DisplayManager.prototype.showSpideyLeds = function() {
      return this.ledsSel = this.d3PadsSvg.selectAll("g.led").data(this.spideyGeom.leds).enter().append("g").attr("class", "led").append("circle").attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      }).attr("r", this.ledUISize).attr("fill", function(d, i) {
        return d.colour;
      });
    };

    DisplayManager.prototype.loadSpideyGeom = function() {
      var jqXHR;
      return jqXHR = $.getJSON("/SpideyGeometry.json", (function(_this) {
        return function(data) {
          var led, _i, _j, _len, _len1, _ref, _ref1;
          _this.spideyGeom = data;
          console.log("LoadedSpideyGeom");
          _ref = _this.spideyGeom.leds;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            led = _ref[_i];
            led.colour = "#DCDCDC";
          }
          _this.d3PadsSvg = d3.select(".spideySvgImg svg");
          _this.padOutlines = _this.d3PadsSvg.selectAll("path");
          _this.showSpideyLeds();
          _this.LEDS = _this.spideyGeom.leds;
          _ref1 = _this.LEDS;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            led = _ref1[_j];
            led.dist = function(pt) {
              return this.dist(pt, this);
            };
          }
          return _this.LEDS.closest = function(pt) {
            var curClosest, curMinDist, thisDist, _k, _len2;
            curClosest = null;
            curMinDist = 1000000;
            for (_k = 0, _len2 = this.length; _k < _len2; _k++) {
              led = this[_k];
              thisDist = led.dist(pt);
              if (curMinDist > thisDist) {
                curMinDist = thisDist;
                curClosest = led;
              }
            }
            return curClosest;
          };
        };
      })(this));
    };

    DisplayManager.prototype.dist = function(pt1, pt2) {
      return Math.sqrt(Math.pow(pt1.x - pt2.x, 2) + Math.pow(pt1.y - pt2.y, 2));
    };

    DisplayManager.prototype.spideyDrawFunction = function() {
      if (this.d3TimerStop) {
        return true;
      }
      draw();
      return false;
    };

    DisplayManager.prototype.show = function() {
      return this.spideyDrawing.ledsSel.attr("fill", function(d) {
        return d.colour;
      });
    };

    DisplayManager.prototype.random = function(min, max) {
      if (max != null) {
        return Math.floor(Math.random() * (max - min)) + min;
      }
      max = min;
      min = 0;
      return Math.floor(Math.random() * (max - min)) + min;
    };

    rgbColour = function(r, g, b) {
      return "rgb(" + r + "," + g + "," + b + ")";
    };

    return DisplayManager;

  })();

}).call(this);
