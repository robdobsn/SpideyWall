// Generated by CoffeeScript 1.8.0
(function() {
  var deleteScript, editScript, getAllSnippets, loadSpideyGeom, random, rgbColour, selectScript, show, showScriptList, showSpideyLeds, spideyCloseScript, spideyDrawFunction, spideyNewScript, spideyRunScript, spideySaveScript, spideyShowScript, spideyStopScript;

  getAllSnippets = function() {
    var jqXHR;
    jqXHR = $.getJSON("/scripts", function(data) {
      var items, spideyScripts;
      items = [];
      spideyScripts = data;
      $.each(data, function(idx, script) {
        items.push("<tr>\n<td class=\"script-title\">" + script.name + "</td>\n<td><a onclick=\"editScript('" + script._id + "');\" class=\"small button\" id=\"edit-script-" + idx + "\">Edit</a></td>\n<td><a onclick=\"deleteScript('" + script._id + "');\" class=\"small button\" id=\"delete-script-" + idx + "\">Del</a></td>\n</tr>");
      });
      $(".scripts-list").empty();
      $("<tbody/>", {
        "class": "script-list-body",
        html: items.join("")
      }).appendTo(".scripts-list");
    });
    jqXHR.fail(function(jqxhr, textStatus, error) {
      var err;
      err = textStatus + ", " + error;
      console.log("Request Failed: " + err);
    });
    jqXHR.always(function() {
      console.log("always");
    });
  };

  editScript = function(scriptId) {
    return selectScript(scriptId);
  };

  deleteScript = function(scriptId) {
    console.log("delete script " + scriptId);
    if (!confirm("Delete script?")) {
      return;
    }
    $.ajax("/scripts/" + scriptId, {
      type: "DELETE",
      error: function(jqXHR, textStatus, errorThrown) {
        return console.log("Delete script by id AJAX Error: " + textStatus);
      },
      success: function(data, textStatus, jqXHR) {
        console.log("Delete script by id successful AJAX call: " + data.ok);
        console.log("script = " + scriptId);
        return showScriptList();
      }
    });
  };

  selectScript = function(scriptId) {
    $.ajax("/scripts/" + scriptId, {
      type: "GET",
      error: function(jqXHR, textStatus, errorThrown) {
        return console.log("Get script by id AJAX Error: " + textStatus);
      },
      success: function(data, textStatus, jqXHR) {
        console.log("Get script by id successful AJAX call: " + data.ok);
        console.log("script = " + scriptId);
        console.log("code = " + atob(data.code));
        return spideyShowScript(data.name, atob(data.code));
      }
    });
  };

  window.initSpidey = function() {
    window.editor = ace.edit("editor");
    window.editor.setTheme("ace/theme/chrome");
    window.editor.getSession().setMode("ace/mode/javascript");
    $("#spideyGeom").appendTo(".spideySvgImg");
    $("#spideyGeom").show();
    showScriptList();
    loadSpideyGeom();
  };

  showSpideyLeds = function() {
    return window.spideyDrawing.ledsSel = window.spideyDrawing.d3PadsSvg.selectAll("g.led").data(window.spideyGeom.leds).enter().append("g").attr("class", "led").append("circle").attr("cx", function(d) {
      return d.x;
    }).attr("cy", function(d) {
      return d.y;
    }).attr("r", window.spideyDrawing.ledUISize).attr("fill", function(d, i) {
      return d.colour;
    });
  };

  loadSpideyGeom = function() {
    var jqXHR;
    return jqXHR = $.getJSON("/SpideyGeometry.json", function(data) {
      var led, _i, _j, _len, _len1, _ref, _ref1;
      window.spideyGeom = data;
      console.log("LoadedSpideyGeom");
      _ref = window.spideyGeom.leds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        led = _ref[_i];
        led.colour = "#DCDCDC";
      }
      window.spideyDrawing = {
        ledUISize: 3
      };
      window.spideyDrawing.d3PadsSvg = d3.select(".spideySvgImg svg");
      window.spideyDrawing.padOutlines = window.spideyDrawing.d3PadsSvg.selectAll("path");
      showSpideyLeds();
      window.LEDS = window.spideyGeom.leds;
      _ref1 = window.LEDS;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        led = _ref1[_j];
        led.dist = function(pt) {
          return window.dist(pt, this);
        };
      }
      return window.LEDS.closest = function(pt) {
        var curClosest, curMinDist, thisDist, _k, _len2;
        curClosest = null;
        curMinDist = 1000000;
        for (_k = 0, _len2 = this.length; _k < _len2; _k++) {
          led = this[_k];
          thisDist = led.dist(pt);
          if (curMinDist > thisDist) {
            curMinDist = thisDist;
            curClosest = led;
          }
        }
        return curClosest;
      };
    });
  };

  window.dist = function(pt1, pt2) {
    return Math.sqrt(Math.pow(pt1.x - pt2.x, 2) + Math.pow(pt1.y - pt2.y, 2));
  };

  showScriptList = function() {
    $(".spidey-new-script").show();
    $(".spidey-run-script").hide();
    $(".spidey-stop-script").hide();
    $(".spidey-close-script").hide();
    $(".spidey-scripts").show();
    $("#editor").hide();
    $(".script-name").hide();
    $(".spidey-save-script").hide();
    getAllSnippets();
  };

  spideyNewScript = function() {
    return spideyShowScript("New Script", "");
  };

  spideyShowScript = function(scriptName, scriptCode) {
    $(".spidey-new-script").hide();
    $(".spidey-run-script").show();
    $(".spidey-stop-script").show();
    $(".spidey-close-script").show();
    $(".spidey-scripts").hide();
    $("#editor").show();
    $(".script-name").show();
    $(".script-name").empty().append('<input type="text" name="script-name"/>');
    $("input[name=script-name]").val(scriptName);
    window.editor.getSession().setValue(scriptCode);
    window.spideyScriptAtStart = {
      name: scriptName,
      code: scriptCode
    };
    $(".spidey-save-script").show();
    window.spideyScriptChanged = false;
    window.editor.on("change", function() {
      return window.spideyScriptChanged = true;
    });
  };

  spideySaveScript = function() {
    var code, jqXHR, newScript, scriptName;
    code = window.editor.getSession().getValue();
    console.log(btoa(code));
    scriptName = $("input[name=script-name]").val().trim();
    newScript = {
      isUpdate: window.spideyScriptAtStart.name === scriptName,
      name: scriptName,
      code: btoa(code)
    };
    jqXHR = $.ajax("/scripts", {
      type: "POST",
      data: JSON.stringify(newScript),
      dataType: "json",
      contentType: "application/json",
      error: function(jqXHR, textStatus, errorThrown) {
        console.log("AJAX Error: " + textStatus);
        return $(".spideyStatus").text(textStatus);
      },
      success: function(data, textStatus, jqXHR) {
        console.log("Successful AJAX call: " + data.ok);
        if (data.ok) {
          return showScriptList();
        } else {
          return $(".spideyStatus").text(data.error === "nameexists" ? "Script name already exists" : "nameisblank" ? "Script name can't be blank" : data.error);
        }
      }
    });
  };

  spideyRunScript = function() {
    var code;
    code = window.editor.getSession().getValue();
    eval(code);
    window.d3TimerStop = false;
    d3.timer(spideyDrawFunction);
  };

  spideyStopScript = function() {
    window.d3TimerStop = true;
  };

  spideyDrawFunction = function() {
    if (window.d3TimerStop) {
      return true;
    }
    draw();
    return false;
  };

  spideyCloseScript = function() {
    if (window.spideyScriptChanged) {
      if (confirm('Discard changes?')) {
        return showScriptList();
      } else {

      }
    } else {
      return showScriptList();
    }
  };

  show = function() {
    return window.spideyDrawing.ledsSel.attr("fill", function(d) {
      return d.colour;
    });
  };

  random = function(min, max) {
    if (max != null) {
      return Math.floor(Math.random() * (max - min)) + min;
    }
    max = min;
    min = 0;
    return Math.floor(Math.random() * (max - min)) + min;
  };

  rgbColour = function(r, g, b) {
    return "rgb(" + r + "," + g + "," + b + ")";
  };

}).call(this);
